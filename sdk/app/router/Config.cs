// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: v2ray.com/core/app/router/config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace V2Ray.Core.App.Router {

  /// <summary>Holder for reflection information generated from v2ray.com/core/app/router/config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for v2ray.com/core/app/router/config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZ2MnJheS5jb20vY29yZS9hcHAvcm91dGVyL2NvbmZpZy5wcm90bxIVdjJy",
            "YXkuY29yZS5hcHAucm91dGVyGiR2MnJheS5jb20vY29yZS9jb21tb24vbmV0",
            "L3BvcnQucHJvdG8aJ3YycmF5LmNvbS9jb3JlL2NvbW1vbi9uZXQvbmV0d29y",
            "ay5wcm90byJ9CgZEb21haW4SMAoEdHlwZRgBIAEoDjIiLnYycmF5LmNvcmUu",
            "YXBwLnJvdXRlci5Eb21haW4uVHlwZRINCgV2YWx1ZRgCIAEoCSIyCgRUeXBl",
            "EgkKBVBsYWluEAASCQoFUmVnZXgQARIKCgZEb21haW4QAhIICgRGdWxsEAMi",
            "IgoEQ0lEUhIKCgJpcBgBIAEoDBIOCgZwcmVmaXgYAiABKA0iSAoFR2VvSVAS",
            "FAoMY291bnRyeV9jb2RlGAEgASgJEikKBGNpZHIYAiADKAsyGy52MnJheS5j",
            "b3JlLmFwcC5yb3V0ZXIuQ0lEUiI4CglHZW9JUExpc3QSKwoFZW50cnkYASAD",
            "KAsyHC52MnJheS5jb3JlLmFwcC5yb3V0ZXIuR2VvSVAiTgoHR2VvU2l0ZRIU",
            "Cgxjb3VudHJ5X2NvZGUYASABKAkSLQoGZG9tYWluGAIgAygLMh0udjJyYXku",
            "Y29yZS5hcHAucm91dGVyLkRvbWFpbiI8CgtHZW9TaXRlTGlzdBItCgVlbnRy",
            "eRgBIAMoCzIeLnYycmF5LmNvcmUuYXBwLnJvdXRlci5HZW9TaXRlItECCgtS",
            "b3V0aW5nUnVsZRILCgN0YWcYASABKAkSLQoGZG9tYWluGAIgAygLMh0udjJy",
            "YXkuY29yZS5hcHAucm91dGVyLkRvbWFpbhIpCgRjaWRyGAMgAygLMhsudjJy",
            "YXkuY29yZS5hcHAucm91dGVyLkNJRFISNAoKcG9ydF9yYW5nZRgEIAEoCzIg",
            "LnYycmF5LmNvcmUuY29tbW9uLm5ldC5Qb3J0UmFuZ2USOAoMbmV0d29ya19s",
            "aXN0GAUgASgLMiIudjJyYXkuY29yZS5jb21tb24ubmV0Lk5ldHdvcmtMaXN0",
            "EjAKC3NvdXJjZV9jaWRyGAYgAygLMhsudjJyYXkuY29yZS5hcHAucm91dGVy",
            "LkNJRFISEgoKdXNlcl9lbWFpbBgHIAMoCRITCgtpbmJvdW5kX3RhZxgIIAMo",
            "CRIQCghwcm90b2NvbBgJIAMoCSLKAQoGQ29uZmlnEkUKD2RvbWFpbl9zdHJh",
            "dGVneRgBIAEoDjIsLnYycmF5LmNvcmUuYXBwLnJvdXRlci5Db25maWcuRG9t",
            "YWluU3RyYXRlZ3kSMAoEcnVsZRgCIAMoCzIiLnYycmF5LmNvcmUuYXBwLnJv",
            "dXRlci5Sb3V0aW5nUnVsZSJHCg5Eb21haW5TdHJhdGVneRIICgRBc0lzEAAS",
            "CQoFVXNlSXAQARIQCgxJcElmTm9uTWF0Y2gQAhIOCgpJcE9uRGVtYW5kEANC",
            "PQoZY29tLnYycmF5LmNvcmUuYXBwLnJvdXRlclABWgZyb3V0ZXKqAhVWMlJh",
            "eS5Db3JlLkFwcC5Sb3V0ZXJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::V2Ray.Core.Common.Net.PortReflection.Descriptor, global::V2Ray.Core.Common.Net.NetworkReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Router.Domain), global::V2Ray.Core.App.Router.Domain.Parser, new[]{ "Type", "Value" }, null, new[]{ typeof(global::V2Ray.Core.App.Router.Domain.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Router.CIDR), global::V2Ray.Core.App.Router.CIDR.Parser, new[]{ "Ip", "Prefix" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Router.GeoIP), global::V2Ray.Core.App.Router.GeoIP.Parser, new[]{ "CountryCode", "Cidr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Router.GeoIPList), global::V2Ray.Core.App.Router.GeoIPList.Parser, new[]{ "Entry" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Router.GeoSite), global::V2Ray.Core.App.Router.GeoSite.Parser, new[]{ "CountryCode", "Domain" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Router.GeoSiteList), global::V2Ray.Core.App.Router.GeoSiteList.Parser, new[]{ "Entry" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Router.RoutingRule), global::V2Ray.Core.App.Router.RoutingRule.Parser, new[]{ "Tag", "Domain", "Cidr", "PortRange", "NetworkList", "SourceCidr", "UserEmail", "InboundTag", "Protocol" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Router.Config), global::V2Ray.Core.App.Router.Config.Parser, new[]{ "DomainStrategy", "Rule" }, null, new[]{ typeof(global::V2Ray.Core.App.Router.Config.Types.DomainStrategy) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Domain for routing decision. 
  /// </summary>
  public sealed partial class Domain : pb::IMessage<Domain> {
    private static readonly pb::MessageParser<Domain> _parser = new pb::MessageParser<Domain>(() => new Domain());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Domain> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Router.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Domain() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Domain(Domain other) : this() {
      type_ = other.type_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Domain Clone() {
      return new Domain(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::V2Ray.Core.App.Router.Domain.Types.Type type_ = 0;
    /// <summary>
    /// Domain matching type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.App.Router.Domain.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    /// Domain value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Domain);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Domain other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Domain other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::V2Ray.Core.App.Router.Domain.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Domain message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Type of domain value.
      /// </summary>
      public enum Type {
        /// <summary>
        /// The value is used as is.
        /// </summary>
        [pbr::OriginalName("Plain")] Plain = 0,
        /// <summary>
        /// The value is used as a regular expression.
        /// </summary>
        [pbr::OriginalName("Regex")] Regex = 1,
        /// <summary>
        /// The value is a root domain.
        /// </summary>
        [pbr::OriginalName("Domain")] Domain = 2,
        /// <summary>
        /// The value is a domain.
        /// </summary>
        [pbr::OriginalName("Full")] Full = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// IP for routing decision, in CIDR form.
  /// </summary>
  public sealed partial class CIDR : pb::IMessage<CIDR> {
    private static readonly pb::MessageParser<CIDR> _parser = new pb::MessageParser<CIDR>(() => new CIDR());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CIDR> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Router.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIDR() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIDR(CIDR other) : this() {
      ip_ = other.ip_;
      prefix_ = other.prefix_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIDR Clone() {
      return new CIDR(this);
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 1;
    private pb::ByteString ip_ = pb::ByteString.Empty;
    /// <summary>
    /// IP address, should be either 4 or 16 bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prefix" field.</summary>
    public const int PrefixFieldNumber = 2;
    private uint prefix_;
    /// <summary>
    /// Number of leading ones in the network mask.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Prefix {
      get { return prefix_; }
      set {
        prefix_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CIDR);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CIDR other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ip != other.Ip) return false;
      if (Prefix != other.Prefix) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Prefix != 0) hash ^= Prefix.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Ip);
      }
      if (Prefix != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Prefix);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ip);
      }
      if (Prefix != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Prefix);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CIDR other) {
      if (other == null) {
        return;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Prefix != 0) {
        Prefix = other.Prefix;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ip = input.ReadBytes();
            break;
          }
          case 16: {
            Prefix = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GeoIP : pb::IMessage<GeoIP> {
    private static readonly pb::MessageParser<GeoIP> _parser = new pb::MessageParser<GeoIP>(() => new GeoIP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeoIP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Router.ConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoIP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoIP(GeoIP other) : this() {
      countryCode_ = other.countryCode_;
      cidr_ = other.cidr_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoIP Clone() {
      return new GeoIP(this);
    }

    /// <summary>Field number for the "country_code" field.</summary>
    public const int CountryCodeFieldNumber = 1;
    private string countryCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CountryCode {
      get { return countryCode_; }
      set {
        countryCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cidr" field.</summary>
    public const int CidrFieldNumber = 2;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Router.CIDR> _repeated_cidr_codec
        = pb::FieldCodec.ForMessage(18, global::V2Ray.Core.App.Router.CIDR.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Router.CIDR> cidr_ = new pbc::RepeatedField<global::V2Ray.Core.App.Router.CIDR>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Router.CIDR> Cidr {
      get { return cidr_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeoIP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeoIP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CountryCode != other.CountryCode) return false;
      if(!cidr_.Equals(other.cidr_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CountryCode.Length != 0) hash ^= CountryCode.GetHashCode();
      hash ^= cidr_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CountryCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CountryCode);
      }
      cidr_.WriteTo(output, _repeated_cidr_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CountryCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryCode);
      }
      size += cidr_.CalculateSize(_repeated_cidr_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeoIP other) {
      if (other == null) {
        return;
      }
      if (other.CountryCode.Length != 0) {
        CountryCode = other.CountryCode;
      }
      cidr_.Add(other.cidr_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CountryCode = input.ReadString();
            break;
          }
          case 18: {
            cidr_.AddEntriesFrom(input, _repeated_cidr_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GeoIPList : pb::IMessage<GeoIPList> {
    private static readonly pb::MessageParser<GeoIPList> _parser = new pb::MessageParser<GeoIPList>(() => new GeoIPList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeoIPList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Router.ConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoIPList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoIPList(GeoIPList other) : this() {
      entry_ = other.entry_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoIPList Clone() {
      return new GeoIPList(this);
    }

    /// <summary>Field number for the "entry" field.</summary>
    public const int EntryFieldNumber = 1;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Router.GeoIP> _repeated_entry_codec
        = pb::FieldCodec.ForMessage(10, global::V2Ray.Core.App.Router.GeoIP.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Router.GeoIP> entry_ = new pbc::RepeatedField<global::V2Ray.Core.App.Router.GeoIP>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Router.GeoIP> Entry {
      get { return entry_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeoIPList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeoIPList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entry_.Equals(other.entry_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entry_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entry_.WriteTo(output, _repeated_entry_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entry_.CalculateSize(_repeated_entry_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeoIPList other) {
      if (other == null) {
        return;
      }
      entry_.Add(other.entry_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entry_.AddEntriesFrom(input, _repeated_entry_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GeoSite : pb::IMessage<GeoSite> {
    private static readonly pb::MessageParser<GeoSite> _parser = new pb::MessageParser<GeoSite>(() => new GeoSite());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeoSite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Router.ConfigReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoSite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoSite(GeoSite other) : this() {
      countryCode_ = other.countryCode_;
      domain_ = other.domain_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoSite Clone() {
      return new GeoSite(this);
    }

    /// <summary>Field number for the "country_code" field.</summary>
    public const int CountryCodeFieldNumber = 1;
    private string countryCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CountryCode {
      get { return countryCode_; }
      set {
        countryCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 2;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Router.Domain> _repeated_domain_codec
        = pb::FieldCodec.ForMessage(18, global::V2Ray.Core.App.Router.Domain.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Router.Domain> domain_ = new pbc::RepeatedField<global::V2Ray.Core.App.Router.Domain>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Router.Domain> Domain {
      get { return domain_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeoSite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeoSite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CountryCode != other.CountryCode) return false;
      if(!domain_.Equals(other.domain_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CountryCode.Length != 0) hash ^= CountryCode.GetHashCode();
      hash ^= domain_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CountryCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CountryCode);
      }
      domain_.WriteTo(output, _repeated_domain_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CountryCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryCode);
      }
      size += domain_.CalculateSize(_repeated_domain_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeoSite other) {
      if (other == null) {
        return;
      }
      if (other.CountryCode.Length != 0) {
        CountryCode = other.CountryCode;
      }
      domain_.Add(other.domain_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CountryCode = input.ReadString();
            break;
          }
          case 18: {
            domain_.AddEntriesFrom(input, _repeated_domain_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GeoSiteList : pb::IMessage<GeoSiteList> {
    private static readonly pb::MessageParser<GeoSiteList> _parser = new pb::MessageParser<GeoSiteList>(() => new GeoSiteList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeoSiteList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Router.ConfigReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoSiteList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoSiteList(GeoSiteList other) : this() {
      entry_ = other.entry_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoSiteList Clone() {
      return new GeoSiteList(this);
    }

    /// <summary>Field number for the "entry" field.</summary>
    public const int EntryFieldNumber = 1;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Router.GeoSite> _repeated_entry_codec
        = pb::FieldCodec.ForMessage(10, global::V2Ray.Core.App.Router.GeoSite.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Router.GeoSite> entry_ = new pbc::RepeatedField<global::V2Ray.Core.App.Router.GeoSite>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Router.GeoSite> Entry {
      get { return entry_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeoSiteList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeoSiteList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entry_.Equals(other.entry_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entry_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entry_.WriteTo(output, _repeated_entry_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entry_.CalculateSize(_repeated_entry_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeoSiteList other) {
      if (other == null) {
        return;
      }
      entry_.Add(other.entry_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entry_.AddEntriesFrom(input, _repeated_entry_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoutingRule : pb::IMessage<RoutingRule> {
    private static readonly pb::MessageParser<RoutingRule> _parser = new pb::MessageParser<RoutingRule>(() => new RoutingRule());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoutingRule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Router.ConfigReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingRule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingRule(RoutingRule other) : this() {
      tag_ = other.tag_;
      domain_ = other.domain_.Clone();
      cidr_ = other.cidr_.Clone();
      portRange_ = other.portRange_ != null ? other.portRange_.Clone() : null;
      networkList_ = other.networkList_ != null ? other.networkList_.Clone() : null;
      sourceCidr_ = other.sourceCidr_.Clone();
      userEmail_ = other.userEmail_.Clone();
      inboundTag_ = other.inboundTag_.Clone();
      protocol_ = other.protocol_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingRule Clone() {
      return new RoutingRule(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private string tag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 2;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Router.Domain> _repeated_domain_codec
        = pb::FieldCodec.ForMessage(18, global::V2Ray.Core.App.Router.Domain.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Router.Domain> domain_ = new pbc::RepeatedField<global::V2Ray.Core.App.Router.Domain>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Router.Domain> Domain {
      get { return domain_; }
    }

    /// <summary>Field number for the "cidr" field.</summary>
    public const int CidrFieldNumber = 3;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Router.CIDR> _repeated_cidr_codec
        = pb::FieldCodec.ForMessage(26, global::V2Ray.Core.App.Router.CIDR.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Router.CIDR> cidr_ = new pbc::RepeatedField<global::V2Ray.Core.App.Router.CIDR>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Router.CIDR> Cidr {
      get { return cidr_; }
    }

    /// <summary>Field number for the "port_range" field.</summary>
    public const int PortRangeFieldNumber = 4;
    private global::V2Ray.Core.Common.Net.PortRange portRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Common.Net.PortRange PortRange {
      get { return portRange_; }
      set {
        portRange_ = value;
      }
    }

    /// <summary>Field number for the "network_list" field.</summary>
    public const int NetworkListFieldNumber = 5;
    private global::V2Ray.Core.Common.Net.NetworkList networkList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Common.Net.NetworkList NetworkList {
      get { return networkList_; }
      set {
        networkList_ = value;
      }
    }

    /// <summary>Field number for the "source_cidr" field.</summary>
    public const int SourceCidrFieldNumber = 6;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Router.CIDR> _repeated_sourceCidr_codec
        = pb::FieldCodec.ForMessage(50, global::V2Ray.Core.App.Router.CIDR.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Router.CIDR> sourceCidr_ = new pbc::RepeatedField<global::V2Ray.Core.App.Router.CIDR>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Router.CIDR> SourceCidr {
      get { return sourceCidr_; }
    }

    /// <summary>Field number for the "user_email" field.</summary>
    public const int UserEmailFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_userEmail_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> userEmail_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UserEmail {
      get { return userEmail_; }
    }

    /// <summary>Field number for the "inbound_tag" field.</summary>
    public const int InboundTagFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_inboundTag_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> inboundTag_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> InboundTag {
      get { return inboundTag_; }
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_protocol_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> protocol_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Protocol {
      get { return protocol_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoutingRule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoutingRule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if(!domain_.Equals(other.domain_)) return false;
      if(!cidr_.Equals(other.cidr_)) return false;
      if (!object.Equals(PortRange, other.PortRange)) return false;
      if (!object.Equals(NetworkList, other.NetworkList)) return false;
      if(!sourceCidr_.Equals(other.sourceCidr_)) return false;
      if(!userEmail_.Equals(other.userEmail_)) return false;
      if(!inboundTag_.Equals(other.inboundTag_)) return false;
      if(!protocol_.Equals(other.protocol_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      hash ^= domain_.GetHashCode();
      hash ^= cidr_.GetHashCode();
      if (portRange_ != null) hash ^= PortRange.GetHashCode();
      if (networkList_ != null) hash ^= NetworkList.GetHashCode();
      hash ^= sourceCidr_.GetHashCode();
      hash ^= userEmail_.GetHashCode();
      hash ^= inboundTag_.GetHashCode();
      hash ^= protocol_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Tag);
      }
      domain_.WriteTo(output, _repeated_domain_codec);
      cidr_.WriteTo(output, _repeated_cidr_codec);
      if (portRange_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PortRange);
      }
      if (networkList_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(NetworkList);
      }
      sourceCidr_.WriteTo(output, _repeated_sourceCidr_codec);
      userEmail_.WriteTo(output, _repeated_userEmail_codec);
      inboundTag_.WriteTo(output, _repeated_inboundTag_codec);
      protocol_.WriteTo(output, _repeated_protocol_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      size += domain_.CalculateSize(_repeated_domain_codec);
      size += cidr_.CalculateSize(_repeated_cidr_codec);
      if (portRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PortRange);
      }
      if (networkList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkList);
      }
      size += sourceCidr_.CalculateSize(_repeated_sourceCidr_codec);
      size += userEmail_.CalculateSize(_repeated_userEmail_codec);
      size += inboundTag_.CalculateSize(_repeated_inboundTag_codec);
      size += protocol_.CalculateSize(_repeated_protocol_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoutingRule other) {
      if (other == null) {
        return;
      }
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
      domain_.Add(other.domain_);
      cidr_.Add(other.cidr_);
      if (other.portRange_ != null) {
        if (portRange_ == null) {
          portRange_ = new global::V2Ray.Core.Common.Net.PortRange();
        }
        PortRange.MergeFrom(other.PortRange);
      }
      if (other.networkList_ != null) {
        if (networkList_ == null) {
          networkList_ = new global::V2Ray.Core.Common.Net.NetworkList();
        }
        NetworkList.MergeFrom(other.NetworkList);
      }
      sourceCidr_.Add(other.sourceCidr_);
      userEmail_.Add(other.userEmail_);
      inboundTag_.Add(other.inboundTag_);
      protocol_.Add(other.protocol_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Tag = input.ReadString();
            break;
          }
          case 18: {
            domain_.AddEntriesFrom(input, _repeated_domain_codec);
            break;
          }
          case 26: {
            cidr_.AddEntriesFrom(input, _repeated_cidr_codec);
            break;
          }
          case 34: {
            if (portRange_ == null) {
              portRange_ = new global::V2Ray.Core.Common.Net.PortRange();
            }
            input.ReadMessage(portRange_);
            break;
          }
          case 42: {
            if (networkList_ == null) {
              networkList_ = new global::V2Ray.Core.Common.Net.NetworkList();
            }
            input.ReadMessage(networkList_);
            break;
          }
          case 50: {
            sourceCidr_.AddEntriesFrom(input, _repeated_sourceCidr_codec);
            break;
          }
          case 58: {
            userEmail_.AddEntriesFrom(input, _repeated_userEmail_codec);
            break;
          }
          case 66: {
            inboundTag_.AddEntriesFrom(input, _repeated_inboundTag_codec);
            break;
          }
          case 74: {
            protocol_.AddEntriesFrom(input, _repeated_protocol_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Config : pb::IMessage<Config> {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Router.ConfigReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config(Config other) : this() {
      domainStrategy_ = other.domainStrategy_;
      rule_ = other.rule_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "domain_strategy" field.</summary>
    public const int DomainStrategyFieldNumber = 1;
    private global::V2Ray.Core.App.Router.Config.Types.DomainStrategy domainStrategy_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.App.Router.Config.Types.DomainStrategy DomainStrategy {
      get { return domainStrategy_; }
      set {
        domainStrategy_ = value;
      }
    }

    /// <summary>Field number for the "rule" field.</summary>
    public const int RuleFieldNumber = 2;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Router.RoutingRule> _repeated_rule_codec
        = pb::FieldCodec.ForMessage(18, global::V2Ray.Core.App.Router.RoutingRule.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Router.RoutingRule> rule_ = new pbc::RepeatedField<global::V2Ray.Core.App.Router.RoutingRule>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Router.RoutingRule> Rule {
      get { return rule_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DomainStrategy != other.DomainStrategy) return false;
      if(!rule_.Equals(other.rule_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DomainStrategy != 0) hash ^= DomainStrategy.GetHashCode();
      hash ^= rule_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DomainStrategy != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DomainStrategy);
      }
      rule_.WriteTo(output, _repeated_rule_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DomainStrategy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DomainStrategy);
      }
      size += rule_.CalculateSize(_repeated_rule_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      if (other.DomainStrategy != 0) {
        DomainStrategy = other.DomainStrategy;
      }
      rule_.Add(other.rule_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            domainStrategy_ = (global::V2Ray.Core.App.Router.Config.Types.DomainStrategy) input.ReadEnum();
            break;
          }
          case 18: {
            rule_.AddEntriesFrom(input, _repeated_rule_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Config message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DomainStrategy {
        /// <summary>
        /// Use domain as is.
        /// </summary>
        [pbr::OriginalName("AsIs")] AsIs = 0,
        /// <summary>
        /// Always resolve IP for domains.
        /// </summary>
        [pbr::OriginalName("UseIp")] UseIp = 1,
        /// <summary>
        /// Resolve to IP if the domain doesn't match any rules.
        /// </summary>
        [pbr::OriginalName("IpIfNonMatch")] IpIfNonMatch = 2,
        /// <summary>
        /// Resolve to IP if any rule requires IP matching.
        /// </summary>
        [pbr::OriginalName("IpOnDemand")] IpOnDemand = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
