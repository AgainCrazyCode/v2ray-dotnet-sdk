// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: v2ray.com/core/app/dns/config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace V2Ray.Core.App.Dns {

  /// <summary>Holder for reflection information generated from v2ray.com/core/app/dns/config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for v2ray.com/core/app/dns/config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiN2MnJheS5jb20vY29yZS9hcHAvZG5zL2NvbmZpZy5wcm90bxISdjJyYXku",
            "Y29yZS5hcHAuZG5zGid2MnJheS5jb20vY29yZS9jb21tb24vbmV0L2FkZHJl",
            "c3MucHJvdG8aK3YycmF5LmNvbS9jb3JlL2NvbW1vbi9uZXQvZGVzdGluYXRp",
            "b24ucHJvdG8i4QEKCk5hbWVTZXJ2ZXISMAoHYWRkcmVzcxgBIAEoCzIfLnYy",
            "cmF5LmNvcmUuY29tbW9uLm5ldC5FbmRwb2ludBJJChJwcmlvcml0aXplZF9k",
            "b21haW4YAiADKAsyLS52MnJheS5jb3JlLmFwcC5kbnMuTmFtZVNlcnZlci5Q",
            "cmlvcml0eURvbWFpbhpWCg5Qcmlvcml0eURvbWFpbhI0CgR0eXBlGAEgASgO",
            "MiYudjJyYXkuY29yZS5hcHAuZG5zLkRvbWFpbk1hdGNoaW5nVHlwZRIOCgZk",
            "b21haW4YAiABKAki2QMKBkNvbmZpZxI4CgtOYW1lU2VydmVycxgBIAMoCzIf",
            "LnYycmF5LmNvcmUuY29tbW9uLm5ldC5FbmRwb2ludEICGAESMwoLbmFtZV9z",
            "ZXJ2ZXIYBSADKAsyHi52MnJheS5jb3JlLmFwcC5kbnMuTmFtZVNlcnZlchI4",
            "CgVIb3N0cxgCIAMoCzIlLnYycmF5LmNvcmUuYXBwLmRucy5Db25maWcuSG9z",
            "dHNFbnRyeUICGAESEQoJY2xpZW50X2lwGAMgASgMEjwKDHN0YXRpY19ob3N0",
            "cxgEIAMoCzImLnYycmF5LmNvcmUuYXBwLmRucy5Db25maWcuSG9zdE1hcHBp",
            "bmcSCwoDdGFnGAYgASgJGk8KCkhvc3RzRW50cnkSCwoDa2V5GAEgASgJEjAK",
            "BXZhbHVlGAIgASgLMiEudjJyYXkuY29yZS5jb21tb24ubmV0LklQT3JEb21h",
            "aW46AjgBGncKC0hvc3RNYXBwaW5nEjQKBHR5cGUYASABKA4yJi52MnJheS5j",
            "b3JlLmFwcC5kbnMuRG9tYWluTWF0Y2hpbmdUeXBlEg4KBmRvbWFpbhgCIAEo",
            "CRIKCgJpcBgDIAMoDBIWCg5wcm94aWVkX2RvbWFpbhgEIAEoCSpFChJEb21h",
            "aW5NYXRjaGluZ1R5cGUSCAoERnVsbBAAEg0KCVN1YmRvbWFpbhABEgsKB0tl",
            "eXdvcmQQAhIJCgVSZWdleBADQjQKFmNvbS52MnJheS5jb3JlLmFwcC5kbnNQ",
            "AVoDZG5zqgISVjJSYXkuQ29yZS5BcHAuRG5zYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::V2Ray.Core.Common.Net.AddressReflection.Descriptor, global::V2Ray.Core.Common.Net.DestinationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::V2Ray.Core.App.Dns.DomainMatchingType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Dns.NameServer), global::V2Ray.Core.App.Dns.NameServer.Parser, new[]{ "Address", "PrioritizedDomain" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Dns.NameServer.Types.PriorityDomain), global::V2Ray.Core.App.Dns.NameServer.Types.PriorityDomain.Parser, new[]{ "Type", "Domain" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Dns.Config), global::V2Ray.Core.App.Dns.Config.Parser, new[]{ "NameServers", "NameServer", "Hosts", "ClientIp", "StaticHosts", "Tag" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, new pbr::GeneratedClrTypeInfo(typeof(global::V2Ray.Core.App.Dns.Config.Types.HostMapping), global::V2Ray.Core.App.Dns.Config.Types.HostMapping.Parser, new[]{ "Type", "Domain", "Ip", "ProxiedDomain" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum DomainMatchingType {
    [pbr::OriginalName("Full")] Full = 0,
    [pbr::OriginalName("Subdomain")] Subdomain = 1,
    [pbr::OriginalName("Keyword")] Keyword = 2,
    [pbr::OriginalName("Regex")] Regex = 3,
  }

  #endregion

  #region Messages
  public sealed partial class NameServer : pb::IMessage<NameServer> {
    private static readonly pb::MessageParser<NameServer> _parser = new pb::MessageParser<NameServer>(() => new NameServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NameServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Dns.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameServer(NameServer other) : this() {
      address_ = other.address_ != null ? other.address_.Clone() : null;
      prioritizedDomain_ = other.prioritizedDomain_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameServer Clone() {
      return new NameServer(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::V2Ray.Core.Common.Net.Endpoint address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::V2Ray.Core.Common.Net.Endpoint Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "prioritized_domain" field.</summary>
    public const int PrioritizedDomainFieldNumber = 2;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Dns.NameServer.Types.PriorityDomain> _repeated_prioritizedDomain_codec
        = pb::FieldCodec.ForMessage(18, global::V2Ray.Core.App.Dns.NameServer.Types.PriorityDomain.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Dns.NameServer.Types.PriorityDomain> prioritizedDomain_ = new pbc::RepeatedField<global::V2Ray.Core.App.Dns.NameServer.Types.PriorityDomain>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Dns.NameServer.Types.PriorityDomain> PrioritizedDomain {
      get { return prioritizedDomain_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NameServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NameServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      if(!prioritizedDomain_.Equals(other.prioritizedDomain_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      hash ^= prioritizedDomain_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      prioritizedDomain_.WriteTo(output, _repeated_prioritizedDomain_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      size += prioritizedDomain_.CalculateSize(_repeated_prioritizedDomain_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NameServer other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::V2Ray.Core.Common.Net.Endpoint();
        }
        Address.MergeFrom(other.Address);
      }
      prioritizedDomain_.Add(other.prioritizedDomain_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (address_ == null) {
              Address = new global::V2Ray.Core.Common.Net.Endpoint();
            }
            input.ReadMessage(Address);
            break;
          }
          case 18: {
            prioritizedDomain_.AddEntriesFrom(input, _repeated_prioritizedDomain_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NameServer message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PriorityDomain : pb::IMessage<PriorityDomain> {
        private static readonly pb::MessageParser<PriorityDomain> _parser = new pb::MessageParser<PriorityDomain>(() => new PriorityDomain());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PriorityDomain> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::V2Ray.Core.App.Dns.NameServer.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PriorityDomain() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PriorityDomain(PriorityDomain other) : this() {
          type_ = other.type_;
          domain_ = other.domain_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PriorityDomain Clone() {
          return new PriorityDomain(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::V2Ray.Core.App.Dns.DomainMatchingType type_ = global::V2Ray.Core.App.Dns.DomainMatchingType.Full;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::V2Ray.Core.App.Dns.DomainMatchingType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "domain" field.</summary>
        public const int DomainFieldNumber = 2;
        private string domain_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Domain {
          get { return domain_; }
          set {
            domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PriorityDomain);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PriorityDomain other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (Domain != other.Domain) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != global::V2Ray.Core.App.Dns.DomainMatchingType.Full) hash ^= Type.GetHashCode();
          if (Domain.Length != 0) hash ^= Domain.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != global::V2Ray.Core.App.Dns.DomainMatchingType.Full) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (Domain.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Domain);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != global::V2Ray.Core.App.Dns.DomainMatchingType.Full) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (Domain.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PriorityDomain other) {
          if (other == null) {
            return;
          }
          if (other.Type != global::V2Ray.Core.App.Dns.DomainMatchingType.Full) {
            Type = other.Type;
          }
          if (other.Domain.Length != 0) {
            Domain = other.Domain;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Type = (global::V2Ray.Core.App.Dns.DomainMatchingType) input.ReadEnum();
                break;
              }
              case 18: {
                Domain = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Config : pb::IMessage<Config> {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::V2Ray.Core.App.Dns.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config(Config other) : this() {
      nameServers_ = other.nameServers_.Clone();
      nameServer_ = other.nameServer_.Clone();
      hosts_ = other.hosts_.Clone();
      clientIp_ = other.clientIp_;
      staticHosts_ = other.staticHosts_.Clone();
      tag_ = other.tag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "NameServers" field.</summary>
    public const int NameServersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::V2Ray.Core.Common.Net.Endpoint> _repeated_nameServers_codec
        = pb::FieldCodec.ForMessage(10, global::V2Ray.Core.Common.Net.Endpoint.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.Common.Net.Endpoint> nameServers_ = new pbc::RepeatedField<global::V2Ray.Core.Common.Net.Endpoint>();
    /// <summary>
    /// Nameservers used by this DNS. Only traditional UDP servers are support at the moment.
    /// A special value 'localhost' as a domain address can be set to use DNS on local system.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.Common.Net.Endpoint> NameServers {
      get { return nameServers_; }
    }

    /// <summary>Field number for the "name_server" field.</summary>
    public const int NameServerFieldNumber = 5;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Dns.NameServer> _repeated_nameServer_codec
        = pb::FieldCodec.ForMessage(42, global::V2Ray.Core.App.Dns.NameServer.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Dns.NameServer> nameServer_ = new pbc::RepeatedField<global::V2Ray.Core.App.Dns.NameServer>();
    /// <summary>
    /// NameServer list used by this DNS client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Dns.NameServer> NameServer {
      get { return nameServer_; }
    }

    /// <summary>Field number for the "Hosts" field.</summary>
    public const int HostsFieldNumber = 2;
    private static readonly pbc::MapField<string, global::V2Ray.Core.Common.Net.IPOrDomain>.Codec _map_hosts_codec
        = new pbc::MapField<string, global::V2Ray.Core.Common.Net.IPOrDomain>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::V2Ray.Core.Common.Net.IPOrDomain.Parser), 18);
    private readonly pbc::MapField<string, global::V2Ray.Core.Common.Net.IPOrDomain> hosts_ = new pbc::MapField<string, global::V2Ray.Core.Common.Net.IPOrDomain>();
    /// <summary>
    /// Static hosts. Domain to IP.
    /// Deprecated. Use static_hosts.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::V2Ray.Core.Common.Net.IPOrDomain> Hosts {
      get { return hosts_; }
    }

    /// <summary>Field number for the "client_ip" field.</summary>
    public const int ClientIpFieldNumber = 3;
    private pb::ByteString clientIp_ = pb::ByteString.Empty;
    /// <summary>
    /// Client IP for EDNS client subnet. Must be 4 bytes (IPv4) or 16 bytes (IPv6). 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClientIp {
      get { return clientIp_; }
      set {
        clientIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "static_hosts" field.</summary>
    public const int StaticHostsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::V2Ray.Core.App.Dns.Config.Types.HostMapping> _repeated_staticHosts_codec
        = pb::FieldCodec.ForMessage(34, global::V2Ray.Core.App.Dns.Config.Types.HostMapping.Parser);
    private readonly pbc::RepeatedField<global::V2Ray.Core.App.Dns.Config.Types.HostMapping> staticHosts_ = new pbc::RepeatedField<global::V2Ray.Core.App.Dns.Config.Types.HostMapping>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::V2Ray.Core.App.Dns.Config.Types.HostMapping> StaticHosts {
      get { return staticHosts_; }
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 6;
    private string tag_ = "";
    /// <summary>
    /// Tag is the inbound tag of DNS client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nameServers_.Equals(other.nameServers_)) return false;
      if(!nameServer_.Equals(other.nameServer_)) return false;
      if (!Hosts.Equals(other.Hosts)) return false;
      if (ClientIp != other.ClientIp) return false;
      if(!staticHosts_.Equals(other.staticHosts_)) return false;
      if (Tag != other.Tag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nameServers_.GetHashCode();
      hash ^= nameServer_.GetHashCode();
      hash ^= Hosts.GetHashCode();
      if (ClientIp.Length != 0) hash ^= ClientIp.GetHashCode();
      hash ^= staticHosts_.GetHashCode();
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nameServers_.WriteTo(output, _repeated_nameServers_codec);
      hosts_.WriteTo(output, _map_hosts_codec);
      if (ClientIp.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ClientIp);
      }
      staticHosts_.WriteTo(output, _repeated_staticHosts_codec);
      nameServer_.WriteTo(output, _repeated_nameServer_codec);
      if (Tag.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Tag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nameServers_.CalculateSize(_repeated_nameServers_codec);
      size += nameServer_.CalculateSize(_repeated_nameServer_codec);
      size += hosts_.CalculateSize(_map_hosts_codec);
      if (ClientIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientIp);
      }
      size += staticHosts_.CalculateSize(_repeated_staticHosts_codec);
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      nameServers_.Add(other.nameServers_);
      nameServer_.Add(other.nameServer_);
      hosts_.Add(other.hosts_);
      if (other.ClientIp.Length != 0) {
        ClientIp = other.ClientIp;
      }
      staticHosts_.Add(other.staticHosts_);
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            nameServers_.AddEntriesFrom(input, _repeated_nameServers_codec);
            break;
          }
          case 18: {
            hosts_.AddEntriesFrom(input, _map_hosts_codec);
            break;
          }
          case 26: {
            ClientIp = input.ReadBytes();
            break;
          }
          case 34: {
            staticHosts_.AddEntriesFrom(input, _repeated_staticHosts_codec);
            break;
          }
          case 42: {
            nameServer_.AddEntriesFrom(input, _repeated_nameServer_codec);
            break;
          }
          case 50: {
            Tag = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Config message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class HostMapping : pb::IMessage<HostMapping> {
        private static readonly pb::MessageParser<HostMapping> _parser = new pb::MessageParser<HostMapping>(() => new HostMapping());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HostMapping> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::V2Ray.Core.App.Dns.Config.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HostMapping() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HostMapping(HostMapping other) : this() {
          type_ = other.type_;
          domain_ = other.domain_;
          ip_ = other.ip_.Clone();
          proxiedDomain_ = other.proxiedDomain_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HostMapping Clone() {
          return new HostMapping(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::V2Ray.Core.App.Dns.DomainMatchingType type_ = global::V2Ray.Core.App.Dns.DomainMatchingType.Full;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::V2Ray.Core.App.Dns.DomainMatchingType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "domain" field.</summary>
        public const int DomainFieldNumber = 2;
        private string domain_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Domain {
          get { return domain_; }
          set {
            domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ip" field.</summary>
        public const int IpFieldNumber = 3;
        private static readonly pb::FieldCodec<pb::ByteString> _repeated_ip_codec
            = pb::FieldCodec.ForBytes(26);
        private readonly pbc::RepeatedField<pb::ByteString> ip_ = new pbc::RepeatedField<pb::ByteString>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<pb::ByteString> Ip {
          get { return ip_; }
        }

        /// <summary>Field number for the "proxied_domain" field.</summary>
        public const int ProxiedDomainFieldNumber = 4;
        private string proxiedDomain_ = "";
        /// <summary>
        /// ProxiedDomain indicates the mapped domain has the same IP address on this domain. V2Ray will use this domain for IP queries.
        /// This field is only effective if ip is empty.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ProxiedDomain {
          get { return proxiedDomain_; }
          set {
            proxiedDomain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as HostMapping);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(HostMapping other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (Domain != other.Domain) return false;
          if(!ip_.Equals(other.ip_)) return false;
          if (ProxiedDomain != other.ProxiedDomain) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != global::V2Ray.Core.App.Dns.DomainMatchingType.Full) hash ^= Type.GetHashCode();
          if (Domain.Length != 0) hash ^= Domain.GetHashCode();
          hash ^= ip_.GetHashCode();
          if (ProxiedDomain.Length != 0) hash ^= ProxiedDomain.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != global::V2Ray.Core.App.Dns.DomainMatchingType.Full) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (Domain.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Domain);
          }
          ip_.WriteTo(output, _repeated_ip_codec);
          if (ProxiedDomain.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(ProxiedDomain);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != global::V2Ray.Core.App.Dns.DomainMatchingType.Full) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (Domain.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
          }
          size += ip_.CalculateSize(_repeated_ip_codec);
          if (ProxiedDomain.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ProxiedDomain);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(HostMapping other) {
          if (other == null) {
            return;
          }
          if (other.Type != global::V2Ray.Core.App.Dns.DomainMatchingType.Full) {
            Type = other.Type;
          }
          if (other.Domain.Length != 0) {
            Domain = other.Domain;
          }
          ip_.Add(other.ip_);
          if (other.ProxiedDomain.Length != 0) {
            ProxiedDomain = other.ProxiedDomain;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Type = (global::V2Ray.Core.App.Dns.DomainMatchingType) input.ReadEnum();
                break;
              }
              case 18: {
                Domain = input.ReadString();
                break;
              }
              case 26: {
                ip_.AddEntriesFrom(input, _repeated_ip_codec);
                break;
              }
              case 34: {
                ProxiedDomain = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
